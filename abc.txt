<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="index.css">
  <!-- Font Awesome -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.1/gsap.min.js"></script>
  <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <title>Beastify</title>
  <link rel="stylesheet" href="./style.css">
</head>
<body>

  <!-- Button to toggle skybox and exposure -->
  <button id="toggle-skybox-button" class="icon-button">
    <i class="fas fa-image"></i>
  </button>
  
  <!-- Horn button to play horn sound -->
  <button id="horn-button" class="icon-button">
    <i class="fas fa-volume-up"></i>
  </button>

  <!-- Info button to toggle animal facts -->
  <button id="info-button" class="icon-button i-btn">
    <i class="fas fa-info-circle"></i>
  </button>

  <!-- Copy code button -->
  <button id="info-button" class="icon-button copy-button">
    <i class="fas fa-code"></i>
  </button>

  <!-- Info box that will toggle visibility -->
  <div id="info-box">
    <h3 class="animal-name text-center mb-1 text-xl"></h3>
    <p id="animal-fact" class="text-md">Lions are powerful big cats known for their majestic manes and dominance.</p>

     <!-- Play, Pause, and Reset Buttons -->
     <div class="flex justify-center gap-3">
      <button id="play-button" class="play-btn">
        <i class="fas fa-play"></i> <!-- Play Icon -->
      </button>
      <button id="pause-button" class="pause-btn">
        <i class="fas fa-pause"></i> <!-- Pause Icon -->
      </button>
      <button id="reset-button" class="reset-btn">
        <i class="fas fa-undo"></i> <!-- Reset Icon -->
      </button>
    </div>
    
  </div>

  <!-- Screenshot button -->
  <button id="screenshot-button" class="icon-button">
    <i class="fas fa-camera"></i>
  </button>

  <!-- Memory Game Box -->
  <div id="memory-box" class="memory-box">
    <h3 class="text-xl md:text-2xl font-semibold text-white mb-4 game-head">Match The Animals</h3>

    <button id="close-memory-box" class="absolute top-5 right-4 text-white bg-red-600  p-2 md:w-9 md:h-9 rounded-md hover:bg-red-700 transition flex items-center justify-center w-7 h-7">
      <i class="fas fa-times text-lg md:text-2xl "></i> <!-- Font Awesome Cross Icon -->
    </button>
    
    <div id="score" class="text-white text-lg md:text-2xl font-semibold mt-5 text-orange">Score: 0</div>

    <div class="flex justify-between items-center game-section">
      <div id="turns" class="bg-blue-500 p-2 md:p-3 rounded-lg shadow-lg font-semibold text-md md:text-lg mt-6">Turns: 0</div> <!-- Display number of turns -->
      <div id="timer" class="bg-green-500 p-2 md:p-3 rounded-lg shadow-lg font-semibold text-md md:text-lg mt-6">Time: 0</div> <!-- Display timer -->
    </div>
    
    <div id="memory-game-grid" ></div> <!-- This will hold the memory cards -->
    
  </div>

  <!-- Gamepad button -->
  <button id="info-button" class="icon-button gamepad-button">
    <i class="fas fa-gamepad"></i>
  </button>

  <div></div>

  <model-viewer id="model-viewer" camera-controls touch-action="pan-y" autoplay ar ar-modes="webxr scene-viewer" scale="18 18 18" shadow-intensity="2" src="./models/Lion/lion.glb" ios-src="./models/Lion/lion.usdz" alt="Animals" style="width: 100vw; height: 100vh;" exposure="1" vr vr-mode-ui>
    <button id="ar-button" class="icon-button" slot="ar-button">
      <img src="./ar.png" class="ar-img">
    </button>
  </model-viewer>

  <div class="slider">
    <div class="slides">
      <!-- Example Models -->
      <button class="slide selected" onclick="switchSrc(this, 0)" style="background-image: url('./models/Lion/lion.png');"></button>
      <button class="slide" onclick="switchSrc(this, 1)" style="background-image: url('./models6/Rhino/rhino.png');"></button>
      <button class="slide" onclick="switchSrc(this, 2)" style="background-image: url('./models/Polar/Bear.png');"></button>
      <button class="slide" onclick="switchSrc(this, 3)" style="background-image: url('./models4/Ostrich/ostrich.png');"></button>
      <button class="slide" onclick="switchSrc(this, 4)" style="background-image: url('./models3/Camel/camel.png');"></button>
      <button class="slide" onclick="switchSrc(this, 5)" style="background-image: url('./models/Dog/dog.png');"></button>
      <button class="slide" onclick="switchSrc(this, 6)" style="background-image: url('./models7/Sheep/sheep.png');"></button>
      <button class="slide" onclick="switchSrc(this, 7)" style="background-image: url('./models5/TexasLonghorn/TexasLonghorn.png');"></button>
      <button class="slide" onclick="switchSrc(this, 8)" style="background-image: url('./models9/Jaguar/jaguar.png');"></button>
      <button class="slide" onclick="switchSrc(this, 9)" style="background-image: url('./models2/AfricanBuffalo/buffalo.png');"></button>
      <button class="slide" onclick="switchSrc(this, 10)" style="background-image: url('./models8/Gazella/gazella.png');"></button>
      <button class="slide" onclick="switchSrc(this, 11)" style="background-image: url('./models5/Penguin/penguin.png');"></button>
      <button class="slide" onclick="switchSrc(this, 12)" style="background-image: url('./models4/Skunk/skunk.png');"></button>
      <button class="slide" onclick="switchSrc(this, 13)" style="background-image: url('./models3/CaracalCat/cat.png');"></button>
      <button class="slide" onclick="switchSrc(this, 14)" style="background-image: url('./models10/Tiger/tiger.png');"></button>
      <button class="slide" onclick="switchSrc(this, 15)" style="background-image: url('./models6/Flamingo/flamingo.png');"></button>
      <button class="slide" onclick="switchSrc(this, 16)" style="background-image: url('./models7/Whale/whale.png');"></button>
      <button class="slide" onclick="switchSrc(this, 17)" style="background-image: url('./models3/Shark/Shark.png');"></button>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
  <script type="module">

    const modelViewer = document.querySelector("model-viewer");
    const toggleButton = document.getElementById("toggle-skybox-button");
    const hornButton = document.getElementById("horn-button");
    const infoButton = document.getElementById("info-button");
    const infoBox = document.getElementById("info-box");
    const animalFact = document.getElementById("animal-fact");
    const animalName = document.querySelector("h3.animal-name");

    const playButton = document.getElementById("play-button");
    const pauseButton = document.getElementById("pause-button");
    const resetButton = document.getElementById("reset-button");
    const screenshotButton = document.getElementById("screenshot-button");
    const copyButton = document.querySelector("button.copy-button");

    let audio = null;
    let isAudioPlaying = false;
    let currentModelIndex = 0;
    let narrationAudio = null;

    // Array of model data
    const modelData = [
      {
        animalName: "Lion",
        modelName: "Lion",
        skyboxUrl: "./models/Lion/scene.jpg",
        hornSoundUrl: "./models/Lion/lion.mp3",
        narrationSoundUrl: "./models/Lion/lionNarration.mp3",
        folder: "./models/Lion",
        description: "Lions are powerful big cats known for their majestic manes and dominance."
      },
      {
        animalName: "Rhino",
        modelName: "Rhino",
        skyboxUrl: "./models6/Rhino/scene.jpg",
        hornSoundUrl: "./models6/Rhino/rhino.mp3",
        narrationSoundUrl: "./models6/Rhino/rhinoNarration.mp3",
        folder: "./models6/Rhino",
        description: "Rhinos are large, herbivorous mammals known for their thick skin and iconic horn."
      },
      {
        animalName: "Polar Bear",
        modelName: "Bear",
        skyboxUrl: "./models/Polar/scene.jpg",
        hornSoundUrl: "./models/Polar/Bear.mp3",
        narrationSoundUrl: "./models/Polar/polarNarration.mp3",
        folder: "./models/Polar",
        description: "Polar bears are large marine mammals adapted to Arctic life, known for their thick fur and strong swimming abilities."
      },
      {
        animalName: "Ostrich",
        modelName: "Ostrich",
        skyboxUrl: "./models4/Ostrich/scene.jpg",
        narrationSoundUrl: "./models4/Ostrich/ostrichNarration.mp3",
        hornSoundUrl: "./models4/Ostrich/ostrich.mp3",
        folder: "./models4/Ostrich",
        description: "Ostriches are the world's largest birds, known for their fast running speed and flightless nature."
      },
      {
        animalName: "Camel",
        modelName: "Camel",
        skyboxUrl: "./models3/Camel/scene.jpg",
        narrationSoundUrl: "./models3/Camel/camelNarration.mp3",
        hornSoundUrl: "./models3/Camel/camel.mp3",
        folder: "./models3/Camel",
        description: "Camels are desert animals which stores fat for energy, and their ability to survive harsh conditions."
      },
      {
        animalName: "Dog",
        modelName: "Dog",
        skyboxUrl: "./models/Dog/scene.jpg",
        narrationSoundUrl: "./models/Dog/dogNarration.mp3",
        hornSoundUrl: "./models/Dog/dog.mp3",
        folder: "./models/Dog",
        description: "Dogs are loyal and intelligent companions, often known as man's best friend. "
      },
      {
        animalName: "Sheep",
        modelName: "Sheep",
        skyboxUrl: "./models7/Sheep/scene.jpg",
        narrationSoundUrl: "./models7/Sheep/sheepNarration.mp3",
        hornSoundUrl: "./models7/Sheep/sheep.mp3",
        folder: "./models7/Sheep",
        description: "Sheep are domesticated herbivores known for their wool, which is used for textiles."
      },
      {
        animalName: "Texas Longhorn",
        modelName: "TexasLonghorn",
        skyboxUrl: "./models5/TexasLonghorn/scene.jpg",
        narrationSoundUrl: "./models5/TexasLonghorn/texasNarration.mp3",
        hornSoundUrl: "./models/TexasLonghorn/texas.mp3",
        folder: "./models5/TexasLonghorn",
        description: "Texas Longhorns are a breed of cattle known for their distinctive long, curved horns and hardy nature."
      },
      {
        animalName: "Jaguar",
        modelName: "Jaguar",
        skyboxUrl: "./models9/Jaguar/scene.jpg",
        narrationSoundUrl: "./models9/Jaguar/jaguarNarration.mp3",
        hornSoundUrl: "./models9/Jaguar/jaguar.mp3",
        folder: "./models9/Jaguar",
        description: "Jaguars are powerful big cats native to the Americas, known for their spotted coats and strength as apex predators."
      }, 
      {
        animalName: "American Buffalo",
        modelName: "buffalo",
        skyboxUrl: "./models2/AfricanBuffalo/scene.jpg", 
        narrationSoundUrl: "./models2/AfricanBuffalo/buffaloNarration.mp3",
        hornSoundUrl: "./models2/AfricanBuffalo/buffalo.mp3",
        folder: "./models2/AfricanBuffalo",
        description: "American buffalo are large, shaggy mammals native to North America, known for their iconic and strong build."
      },
      {
        animalName: "Gazella",
        modelName: "gazella",
        skyboxUrl: "./models8/Gazella/scene.jpg", 
        narrationSoundUrl: "./models8/Gazella/gazellaNarration.mp3",
        hornSoundUrl: "./models8/Gazella/gazella.mp3",
        folder: "./models8/Gazella",
        description: "Gazelles are graceful, fast-running antelopes found in Africa and Asia, known for their slender bodies and agility."
      },
      {
        animalName: "Penguin",
        modelName: "Penguin",
        skyboxUrl: "./models5/Penguin/scene.jpg", 
        narrationSoundUrl: "./models5/Penguin/penguinNarration.mp3",
        hornSoundUrl: "./models5/Penguin/penguin.mp3",
        folder: "./models5/Penguin",
        description: "Penguins are flightless birds that thrive in cold climates, known for their excellent swimming abilities."
      },
      {
        animalName: "Skunk",
        modelName: "Skunk",
        skyboxUrl: "./models4/Skunk/scene.jpg", 
        narrationSoundUrl: "./models4/Skunk/skunkNarration.mp3",
        hornSoundUrl: "./models4/Skunk/skunk.mp3",
        folder: "./models4/Skunk",
        description: "Skunks are small mammals known for their black and white fur and the potent spray they use as a defense mechanism."
      },
      {
        animalName: "Caracal Cat",
        modelName: "cat",
        skyboxUrl: "./models3/CaracalCat/scene.jpg", 
        narrationSoundUrl: "./models3/CaracalCat/catNarration.mp3",
        hornSoundUrl: "./models3/CaracalCat/cat.mp3",
        folder: "./models3/CaracalCat",
        description: "Caracal cats are wild felines with distinctive tufted ears and exceptional agility, native to Africa."
      },
      {
        animalName: "White Tiger",
        modelName: "Tiger",
        skyboxUrl: "./models10/Tiger/scene.jpg", 
        narrationSoundUrl: "./models10/Tiger/tigerNarration.mp3",
        hornSoundUrl: "./models10/Tiger/tiger.mp3",
        folder: "./models10/Tiger",
        description: "White tigers are rare, strikingly beautiful big cats with white fur and black stripes, known for their power and grace."
      },
      {
        animalName: "Flamingo",
        modelName: "flamingo",
        skyboxUrl: "./models6/Flamingo/scene.jpg", 
        narrationSoundUrl: "./models6/Flamingo/flamingoNarration.mp3",
        hornSoundUrl: "./models6/Flamingo/flamingo.mp3",
        folder: "./models6/Flamingo",
        description: "Flamingos are tall, wading birds known for their vibrant pink feathers and distinctive curved beaks."
      },
      {
        animalName: "Whale",
        modelName: "Whale",
        skyboxUrl: "./models7/Whale/scene.jpeg", 
        narrationSoundUrl: "./models7/Whale/whaleNarration.mp3",
        hornSoundUrl: "./models7/Whale/whale.mp3",
        folder: "./models7/Whale",
        description: "Whales are massive marine mammals known for their size and complex communication."
      },
      {
        animalName: "Shark",
        modelName: "Shark",
        skyboxUrl: "./models3/Shark/scene.jpeg",
        narrationSoundUrl: "./models3/Shark/sharkNarration.mp3",
        hornSoundUrl: "./models3/Shark/shark.mp3",
        folder: "./models3/Shark",
        description: "Sharks are apex predators with sharp teeth and excellent senses, playing a key role in marine ecosystems."
      }
    ];

    // Copy Feature
    copyButton.addEventListener("click", () => {
      let code = `<iframe
                src="https://beastify.onrender.com/"
                width="500px"
                height="500px"
                style="border: none;"
              ></iframe>`;
      
      // Create a temporary textarea element to hold the code
      const textarea = document.createElement("textarea");
      document.body.appendChild(textarea);
      textarea.value = code;
      textarea.select();
      document.execCommand("copy");
      
      // Remove the temporary textarea
      document.body.removeChild(textarea);
      alert("Code Copied!");
    });

    // Initial Audio for first model by default
    narrationAudio = new Audio(modelData[0].narrationSoundUrl);

    let skyboxEnabled = false;
    let isNarrationPlaying = false;
    animalName.textContent = modelData[0].animalName;

    window.switchSrc = (element, modelIndex) => {
    const model = modelData[modelIndex];
    const modelFolder = model.folder;
    const modelBaseName = model.modelName.toLowerCase();

    modelViewer.src = `${modelFolder}/${modelBaseName}.glb`;
    modelViewer.poster = `${modelFolder}/${modelBaseName}.png`;
    modelViewer.iosSrc = `${modelFolder}/${modelBaseName}.usdz`;

    if(modelBaseName == "whale" || modelBaseName == "shark"){
         modelViewer.setAttribute("shadow-intensity","0");
    }else{
      modelViewer.setAttribute("shadow-intensity","2");
    }

    // Update selected slide
    const slides = document.querySelectorAll(".slide");
    slides.forEach((slide) => slide.classList.remove("selected"));
    element.classList.add("selected");

    currentModelIndex = modelIndex;
    animalName.textContent = model.animalName;
    animalFact.textContent = model.description;

    // Stop any ongoing narration or horn sound before switching models
    if (narrationAudio) {
      narrationAudio.pause();
      narrationAudio.currentTime = 0; // Reset narration to the start
    }

    // Update the horn sound (if needed)
    if (audio) {
      audio.pause();
    }

    // Set up new narration audio
    narrationAudio = new Audio(model.narrationSoundUrl);

    // Set the Play button to active state
    playButton.disabled = false;
    pauseButton.disabled = true;
    resetButton.disabled = true;
  };

  // Play button functionality
  playButton.addEventListener("click", () => {
    // Always start the narration from the beginning
    if (narrationAudio) {
      // Reset narration to the start before playing
      narrationAudio.currentTime = 0;  // Reset to start
      narrationAudio.play();  // Play narration
      isNarrationPlaying = true;

      // Disable Play and enable Pause and Reset buttons
      playButton.disabled = true;
      pauseButton.disabled = false;
      resetButton.disabled = false;
    }
  });

  // Pause button functionality
  pauseButton.addEventListener("click", () => {
    if (narrationAudio) {
      narrationAudio.pause();  // Pause narration
      isNarrationPlaying = false;

      // Disable Pause and enable Play and Reset buttons
      playButton.disabled = false;
      pauseButton.disabled = true;
      resetButton.disabled = false;
    }
  });

  // Reset button functionality
  resetButton.addEventListener("click", () => {
    if (narrationAudio) {
      narrationAudio.currentTime = 0;  // Reset the narration to start
      narrationAudio.pause();  // Pause narration
      isNarrationPlaying = false;

      // Enable Play button and disable Pause/Reset buttons
      playButton.disabled = false;
      pauseButton.disabled = true;
      resetButton.disabled = true;
    }
  });


  // Check if the model-viewer supports the `toDataURL` method
  screenshotButton.addEventListener("click", () => {
    // Check if the `model-viewer` element supports the toDataURL method for screenshots
    if (modelViewer.toDataURL) {
      const imageUrl = modelViewer.toDataURL('image/png'); // Capture the screenshot as a PNG

      // Create a temporary link to trigger the download
      const link = document.createElement("a");
      link.href = imageUrl;
      link.download = "Beastify.png"; // Name the downloaded file
      link.click();
    } else {
      alert("Screenshot functionality is not supported by this model viewer.");
    }
  });

  // Toggle skybox and exposure
  toggleButton.addEventListener("click", () => {
    const model = modelData[currentModelIndex];
    if (skyboxEnabled) {
      modelViewer.removeAttribute("skybox-image");
      modelViewer.setAttribute("exposure", "1");
      skyboxEnabled = false;
      toggleButton.innerHTML = '<i class="fas fa-image"></i>';
    } 
    else {
      modelViewer.setAttribute("skybox-image", model.skyboxUrl);
      modelViewer.setAttribute("exposure", "5");
      skyboxEnabled = true;
      toggleButton.innerHTML = '<i class="fas fa-image"></i>';
    }
  });

  // Play horn sound for the selected model
  hornButton.addEventListener("click", () => {
    const model = modelData[currentModelIndex];
    const hornAudio = new Audio(model.hornSoundUrl);
    hornAudio.play();
  });

  // Toggle facts visibility with GSAP animation
  infoButton.addEventListener("click", () => {
    const isVisible = infoBox.style.display === "block";
    if (isVisible) {
      gsap.to(infoBox, { y: "30%", opacity: 0, duration: 0.5, ease: "power2.inOut", onComplete: () => { infoBox.style.display = "none"; } });
    } else {  
      infoBox.style.display = "block";
      gsap.fromTo(infoBox, { y: "30%", opacity: 0 }, { y: "0%", opacity: 1, duration: 0.5, ease: "power2.inOut" });
    }
  });

  // List of animal images
  const animalImages = [
      './models/Lion/lion.png',
      './models6/Rhino/rhino.png',
      './models/Polar/Bear.png',
      './models4/Ostrich/ostrich.png',
      './models3/Camel/camel.png',
      './models/Dog/dog.png',
      './models7/Sheep/sheep.png',
      './models5/TexasLonghorn/TexasLonghorn.png',
      './models9/Jaguar/jaguar.png',
      './models2/AfricanBuffalo/buffalo.png',
      './models2/Gazella/gazella.png',
      './models5/Penguin/penguin.png',
      './models4/Skunk/skunk.png',
      './models3/CaracalCat/cat.png',
      './models10/Tiger/tiger.png',
      './models6/Flamingo/flamingo.png',
      './models7/Whale/whale.png',
      './models3/Shark/Shark.png'
  ];

  // Function to shuffle the array (Fisher-Yates shuffle algorithm)
  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]]; // Swap elements
    }
  }

  // Variables for game state
  let flippedCards = [];
  let matchedCards = [];
  let score = 0;
  let turns = 0;
  let gameTime = 0; // Game time in seconds
  let timerInterval;
  let gameStarted = false;
  // Declare the audio variables
  const correctSound = new Audio('./music/correct.mp3');
  const incorrectSound = new Audio('./music/incorrect.mp3');
  const victorySound = new Audio('./music/victory.mp3');


  // Reset score function
  function resetScore() {
    score = 0;
    turns = 0;
    gameTime = 0;
    updateScore();
    updateTurns();
    updateTime();
  }

  // Function to update score
  function updateScore() {
    document.getElementById("score").innerText = `Score: ${score}`;
    
    // Trigger confetti if score reaches 90
    if (score >= 75) {
      victorySound.play();  // Play victory sound
      triggerConfetti();  // Trigger confetti
    }

    // Stop the timer when score reaches or exceeds 75
    if (score >= 75 && timerInterval) {
      stopTimer();  // Stop the timer
    }
  }

  // Function to update turns
  function updateTurns() {
    document.getElementById("turns").innerText = `Turns: ${turns}`;
  }

  // Function to update time (in minutes and seconds format)
  function updateTime() {
    const minutes = Math.floor(gameTime / 60); // Get minutes
    const seconds = gameTime % 60; // Get remaining seconds
    document.getElementById("timer").innerText = `Time: ${minutes} min ${seconds} sec`;
  }

  let shuffledImages = [];

  // Function to generate 20 shuffled cards
  function generateCards() {
    const gameGrid = document.getElementById("memory-game-grid");

    // Clear the game grid if cards already exist (prevents appending)
    gameGrid.innerHTML = '';

    // Reset game state
    flippedCards = [];
    matchedCards = [];
    resetScore(); // Reset score at the start of each game

    // Duplicate the images array to make pairs, and shuffle the result
    const shuffledImages = [...animalImages.slice(0,15), ...animalImages.slice(0,15)];
    shuffleArray(shuffledImages);  // Shuffle the images array

    // Generate cards dynamically based on the shuffled images
    shuffledImages.forEach((image, index) => {
      const card = document.createElement("div");
      card.classList.add("memory-card");
      card.setAttribute("data-id", index);  // Unique data attribute for each card

      const front = document.createElement("div");
      front.classList.add("front");

      const back = document.createElement("div");
      back.classList.add("back");

      // Create an image element for the back of the card
      const img = document.createElement("img");
      img.src = image;  // Set the image source dynamically
      img.alt = `Animal Image ${index}`;  // Add alt text for accessibility
      console.log(img.src);
      img.style.width = "100%";  // Ensure the image fills the card
      img.style.height = "100%";  // Ensure the image fills the card
      img.style.objectFit = "contain"; // Cover the space within the card, maintaining aspect ratio
      img.style.opacity = 0; // Initially hide the image

      back.appendChild(img);  // Append the image to the back of the card
      card.appendChild(front);
      card.appendChild(back);
      gameGrid.appendChild(card);
    });

    addCardEventListeners();  // Add event listeners to the generated cards
    startTimer(); // Start the timer when the game begins
  }

  // Handle card flip logic with GSAP animation for reveal
  function addCardEventListeners() {
    const cards = document.querySelectorAll('.memory-card');
    cards.forEach(card => {
      card.addEventListener('click', function () {
        if (flippedCards.length < 2 && !card.classList.contains('flip') && !matchedCards.includes(card)) {
          // Flip the card using GSAP
          gsap.to(card, {
            rotationY: 180,  // Flip the card to show the back
            duration: 0.5,
            ease: "power2.inOut",
            onComplete: () => {
              // Reveal the image only after the flip animation is complete
              const backImage = card.querySelector('.back img');
              gsap.to(backImage, { opacity: 1, duration: 0.5 });  // Fade in the image
            }
          });

          card.classList.add('flip');
          flippedCards.push(card);

          if (flippedCards.length === 2) {
            turns++;
            updateTurns(); // Update the turn count
            checkMatch();
          }
        }
      });
    });
  }

  // Check if two flipped cards match
  function checkMatch() {
    const [card1, card2] = flippedCards;

    if (card1.querySelector('img').src === card2.querySelector('img').src) {
      // Cards match, increase score
      score += 5;
      matchedCards.push(card1, card2);
      flippedCards = [];

      // Add green box shadow to matched cards
      gsap.to(card1, {
        boxShadow: "0 0 12px 5px green",
        duration: 0.5
      });
      gsap.to(card2, {
        boxShadow: "0 0 12px 5px green",
        duration: 0.5
      });

      // Play correct sound
      correctSound.play(); 

      updateScore();  // Update the score on the screen

      // Check if all cards are matched
      if (matchedCards.length === shuffledImages.length) {
        triggerConfetti();  // Trigger confetti when all cards match
        stopTimer(); // Stop the timer when the game is won

      }
    } else {
      setTimeout(() => {
        gsap.to(card1, {
          rotationY: 0,  // Flip back the first card
          duration: 0.5,
          ease: "power2.inOut"
        });
        gsap.to(card2, {
          rotationY: 0,  // Flip back the second card
          duration: 0.5,
          ease: "power2.inOut"
        });

        card1.classList.remove('flip');
        card2.classList.remove('flip');
        flippedCards = [];
        incorrectSound.play();  // Play incorrect sound
      }, 1000);  // Delay before flipping back
    }
  }

  // Trigger confetti when score reaches 90 or all cards match
  function triggerConfetti() {
    confetti({
      particleCount: 190,
      spread: 140,
      origin: { y: 0.6 }
    });
  }

  // Start the timer
  function startTimer() {
    if (!gameStarted) {
      gameStarted = true; // Mark the game as started
      timerInterval = setInterval(() => {
      gameTime++;
      updateTime();
      }, 1000);
    }
  
  }

  // Stop the timer
  function stopTimer() {
    clearInterval(timerInterval);
    gameStarted = false; // Mark the game as not started
  }

  // Open the memory box and start the game
  document.querySelector(".gamepad-button").addEventListener("click", function() {
    document.getElementById("memory-box").style.display = "block";
    generateCards(); // Generate the game when the button is clicked
  });

  // Close the memory box
  document.getElementById("close-memory-box").addEventListener("click", function() {
    document.getElementById("memory-box").style.display = "none";
    document.getElementById("memory-game-grid").innerHTML = ""; // Clear the game
    stopTimer(); // Stop the timer when the game is closed
  });

  </script>
</body>
</html>